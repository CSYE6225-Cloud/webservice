name: deployment

on:
  pull_request:
    branches: [main]
    types: [closed]

# on:
#   workflow_run:
#     workflows: [deployment]
#     types: [completed]
#     branches: [main]

jobs:
  deploy:
    if: ${{ github.event.pull_request.merged == true }}
    # needs: packer
    runs-on: ubuntu-latest
    # permissions:
    #   id-token: write
    #   contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    # Config web service
    - name: Run build script
      env:
        AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        MYSQL_PWD: ${{ secrets.MYSQL_PWD }}
      run: |
        ./.github/scripts/config.sh
      shell: bash

    # Package artifact
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
    - name: Package
      run: mvn --batch-mode package

    # Build AMI with Packer
    - name: Set packer version
      uses: hashicorp-contrib/setup-packer@v1
      with:
        packer-version: 1.7.10

    - name: Packer build
      env:
        PACKER_LOG: 1
      run: |
        packer build --var-file=ami.pkrvars.hcl ami.pkr.hcl

    - name: Upload packer output file
      uses: actions/upload-artifact@v2
      with:
        name: packer.manifest.json
        path: packer.manifest.json

# how to use uploaded file
    # - name: Download a single artifact
    #   uses: actions/download-artifact@v2
    #   with:
    #     name: output-log-file
    
    # - name: Configure AWS credentials from Test account
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
    #     aws-region: us-east-1
    # - name: Create Instance
    #     with:
    #       security-group-ids: sg-0103a543c930443a4
    #       subnet-id: subnet-07d01ffeac4a8d42f
    #       AMI_ID: ami-0c867618fab17dad0
    #     run: |
    #       aws ec2 run-instances \
    #         --image-id $AMI_ID \
    #         --instance-type t2.micro \
    #         --key-name aws-webapp \
    #         --security-group-ids $security-group-ids \
    #         --subnet-id $subnet-id \
    #         --disable-api-termination \
    #         --associate-public-ip-address \
    #         --block-device-mappings file://mapping.json

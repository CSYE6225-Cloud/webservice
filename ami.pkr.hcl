variable "aws_access_key" {
  type    = string
  default = ""
}

variable "aws_region" {
  type    = string
  default = ""
}

variable "aws_secret_key" {
  type    = string
  default = ""
}

variable "source_ami" {
  type    = string
  default = ""
}

variable "ssh_username" {
  type    = string
  default = "ubuntu"
}

variable "mysql_pwd" {
  sensitive = true
  type      = string
  default   = ""
}

locals {
  timestamp = regex_replace(timestamp(), "[- TZ:]", "")
  home      = "/home/${var.ssh_username}"
}

source "amazon-ebs" "autogenerated_1" {
  access_key = "${var.aws_access_key}"
  secret_key = "${var.aws_secret_key}"
  region     = "${var.aws_region}"
  source_ami_filter {
    filters = {
      virtualization-type = "hvm"
      name                = "amzn2-ami-kernel-5.10-hvm-2.0.*-x86_64-gp2"
      root-device-type    = "ebs"
    }
    owners      = ["amazon"]
    most_recent = true
  }
  ami_users = [
    "888984377451",
    "111310074807"
  ]
  instance_type               = "t2.micro"
  ami_description             = "Amazon Linux 2 AMI for CSYE 6225"
  ami_name                    = "csye6225_spring2022_${local.timestamp}"
  ssh_username                = "${var.ssh_username}"
  associate_public_ip_address = true
  launch_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/xvda"
    volume_size           = 20
    volume_type           = "gp2"
  }
}

build {
  sources = ["source.amazon-ebs.autogenerated_1"]

  provisioner "file" {
    sources = [
      "target/webapp-0.0.1-SNAPSHOT.jar",
      "setup.sh",
      "webapp.service",
      "MySQLDatabase.sql"
    ]
    destination = "${local.home}/"
  }

  provisioner "shell" {
    environment_vars = [
      "DB_PWD=${var.mysql_pwd}",
      "MYSQL_PWD=${var.mysql_pwd}"
    ]

    inline = [
      "echo \"---------------------------------Install Dependancies---------------------------------\"",
      "chmod +x setup.sh",
      "./setup.sh",
      "rm setup.sh",
      "echo \"---------------------------------Dependancies Installed---------------------------------\"",

      "echo \"---------------------------------Install Webapp---------------------------------\"",
      "sudo groupadd webapp && sudo useradd -g webapp webapp",
      "sudo chown webapp:webapp webapp-0.0.1-SNAPSHOT.jar",
      "sudo chmod 500 webapp-0.0.1-SNAPSHOT.jar",
      "sudo chmod 755 webapp.service",
      "sudo chown root:root webapp.service",
      "sudo mv webapp-0.0.1-SNAPSHOT.jar /usr/local/bin/",
      "sudo mv webapp.service /etc/systemd/system/",
      "sudo systemctl daemon-reload",
      "sudo systemctl enable webapp",
      "sudo systemctl start webapp",
      "sudo systemctl status webapp",
      "echo \"---------------------------------Install Webapp---------------------------------\"",

      "echo \"---------------------------------All Command Finished---------------------------------\""
    ]
  }

  post-processor "manifest" {
    output     = "ami.packer.manifest.json"
    strip_path = true
  }

}
